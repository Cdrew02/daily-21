---
title: "daily 21"
subtitle: "Ecosystem Science and Sustainability 330"
author:
  - name: Chris Drew
    email: "cdrew02@colostate.edu"
format: 
  html:
    output-dir: docs
execute:
  echo: true
---

```{r}
library(osmdata)
library(sf)
library(dplyr)
library(aws.s3)
library(terra)
library(ggplot2)

# Load the DEM
r <- rast("data/poudre-elev.tif")

# Query Fort Collins boundary from OpenStreetMap
fc_query <- opq("Fort Collins, Colorado") |> 
  add_osm_feature(key = "admin_level", value = "8") |>  # city-level boundaries
  osmdata_sf()

# Extract the polygon geometry
fc <- fc_query$osm_multipolygons |> 
  filter(name == "Fort Collins") |> 
  st_transform(4326)  # ensure it's in WGS84

# Get river data from OSM
foco_rivers <- opq(st_bbox(st_transform(fc, 4326))) |> 
  add_osm_feature("waterway") |> 
  osmdata_sf()

# === FIXED river extraction steps ===

# Transform river geometries to match DEM CRS
rivers_transformed <- st_transform(foco_rivers$osm_lines, crs(r))

# Clip to bounding box of DEM
rivers_clipped <- st_intersection(rivers_transformed, st_as_sfc(st_bbox(r)))

# Filter to Cache la Poudre only
poudre_rivers <- rivers_clipped %>%
  filter(grepl("Poudre", name, ignore.case = TRUE))

# Calculate lengths and select the longest segment
poudre_rivers <- poudre_rivers %>%
  mutate(length = st_length(geometry)) %>%
  slice_max(length, n = 1)

# Final river segment
river <- poudre_rivers

# Plot DEM and river
plot(r)
plot(river, add = TRUE, col = "blue", lwd = 2)

# Extract inlet and outlet points
inlet  <- head(st_cast(river, "POINT"), 1)
outlet <- tail(st_cast(river, "POINT"), 1)
pts    <- bind_rows(inlet, outlet)

# Plot inlet and outlet
plot(r)
plot(river, add = TRUE, col = "blue", lwd = 2)
plot(pts$geometry, add = TRUE, col = c("green", "red"), pch = 16)

# Extract DEM values at inlet and outlet
elev <- extract(r, vect(pts))

# Combine elevation data with coordinates
profile_df <- bind_cols(
  st_coordinates(pts) |> as_tibble(),
  elev
) |>
  mutate(ID = row_number())

# Create straight-line connection
line <- st_cast(st_union(pts), "LINESTRING")

# Compute sinuosity
river_length <- st_length(river)
straight_length <- st_length(line)
sinuosity <- river_length / straight_length
print(sinuosity)

# Compute slope
slope <- 100 * (elev$dem[1] - elev$dem[2]) / as.numeric(river_length)
print(slope)

# Plot elevation profile
ggplot(profile_df, aes(x = ID, y = dem)) +
  geom_line(color = "blue") +
  labs(title = "River Elevation Profile",
       x = "River Point ID", y = "Elevation (cm)") +
  theme_minimal()

```

```{r}

```

